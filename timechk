#!/usr/bin/env bash

tty -s && interactive=1 || interactive=0
print_counter () { ((interactive)) && printf "${1:?}\r" >&2; }
loops=0
errors=0

# fqls extracted from unique interval tag sets look up to the same tags
#
timew export \
| jq -r $'.[].tags | join("\x20")' \
| sort -u \
| grep -v -e ^time/ \
| (
	while read line
	do
		fql=($(fmt -1 <<< "$line" | sort -u | grep -v -e ^\\+ -e /$))

		if ((${#fql[@]} != 1))
		then echo "bad line: '$line'" >&2; false; exit; fi

		if [[ $fql =~ [^[:alnum:]/-] ]]
		then echo "bad fql: '$line'" >&2; false; exit; fi

		actual=($(fmt -1 <<< "$line" | sort -u))
		theory=($(timewtags --exact $fql | fmt -1 | sort -u))
		actual="${actual[*]}"
		theory="${theory[*]}"

		if [[ $actual == $theory ]]
		then print_counter $loops
		else
			let errors++
			echo $loops: $fql "actual:'$actual' theory:'$theory'"
		fi

		let loops++
	done

	if ((interactive))
	then for ((i = 0; i < 8; i ++))
	do printf "%c" $'\x20'; done; fi
)

# all intervals are tagged
timew export | jq -er '.[] | select(.tags | length == 0)' && let errors++

# intervals with only one tag all reside in the time/ namespace
timew export | jq -er '.[] |
	select(.tags | length == 1) |
	select(.tags[0] | startswith("time/") | not)
' && let errors++

# usually from cron so output is more relevant, but give accurate status also
((errors == 0))
